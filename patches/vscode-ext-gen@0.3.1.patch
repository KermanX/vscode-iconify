diff --git a/dist/index.mjs b/dist/index.mjs
index 0563417414296a4f94364c4e81c7b1734ad937f8..d23db1a703057d94908d56fe089e86db909d41e4 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -7,6 +7,11 @@ const forwardKeys = [
   "displayName",
   "description"
 ];
+function convertCase(input) {
+  if (input.match(/^[a-z0-9$]*$/i) && !input.match(/^\d/))
+    return input;
+  return camelCase(input);
+}
 function generate(packageJson, options = {}) {
   let {
     header = true,
@@ -31,7 +36,7 @@ function generate(packageJson, options = {}) {
   }
   lines.push(
     "",
-    ...generateCommentBlock("Type union of all commands")
+    ...commentBlock("Type union of all commands")
   );
   if (!packageJson.contributes?.commands?.length) {
     lines.push("export type CommandKey = never");
@@ -45,14 +50,14 @@ function generate(packageJson, options = {}) {
   }
   lines.push(
     "",
-    ...generateCommentBlock(`Commands map registed by \`${extensionId}\``),
+    ...commentBlock(`Commands map registed by \`${extensionId}\``),
     "export const commands = {",
     ...(packageJson.contributes?.commands || []).flatMap((c) => {
       const name = withoutExtensionPrefix(c.command);
       return [
-        ...generateCommentBlock(`${c.title}
+        ...commentBlock(`${c.title}
 @value \`${c.command}\``, 2),
-        `  ${camelCase(name)}: ${JSON.stringify(c.command)},`
+        `  ${convertCase(name)}: ${JSON.stringify(c.command)},`
       ];
     }),
     "} satisfies Record<string, CommandKey>"
@@ -60,7 +65,7 @@ function generate(packageJson, options = {}) {
   const configsObject = packageJson.contributes?.configuration?.properties || {};
   lines.push(
     "",
-    ...generateCommentBlock("Type union of all configs")
+    ...commentBlock("Type union of all configs")
   );
   if (!Object.keys(configsObject).length) {
     lines.push("export type ConfigKey = never");
@@ -87,7 +92,7 @@ function generate(packageJson, options = {}) {
     "export interface ConfigShorthandMap {",
     ...Object.entries(configsObject).flatMap(([key]) => {
       return [
-        `  ${camelCase(withoutExtensionPrefix(key))}: ${JSON.stringify(key)},`
+        `  ${convertCase(withoutExtensionPrefix(key))}: ${JSON.stringify(key)},`
       ];
     }),
     "}"
@@ -102,18 +107,18 @@ function generate(packageJson, options = {}) {
   );
   lines.push(
     "",
-    ...generateCommentBlock(`Configs map registed by \`${extensionId}\``),
+    ...commentBlock(`Configs map registed by \`${extensionId}\``),
     "export const configs = {",
     ...Object.entries(configsObject).flatMap(([key, value]) => {
       const name = withoutExtensionPrefix(key);
       return [
-        ...generateCommentBlock([
+        ...commentBlock([
           value.description,
           `@key \`${key}\``,
           `@default \`${JSON.stringify(value.default)}\``,
           `@type \`${value.type}\``
         ].join("\n"), 2),
-        `  ${camelCase(name)}: {`,
+        `  ${convertCase(name)}: {`,
         `    key: "${key}",`,
         `    default: ${JSON.stringify(value.default)},`,
         `  } as ConfigItem<"${key}">,`
@@ -121,12 +126,31 @@ function generate(packageJson, options = {}) {
     }),
     "}"
   );
+  const scopedConfigs = Object.entries(configsObject).filter(([key]) => key.startsWith(extensionPrefix));
+  lines.push(
+    "",
+    "export interface ScopedConfigKeyTypeMap {",
+    ...scopedConfigs.map(([key, value]) => {
+      return `  ${JSON.stringify(withoutExtensionPrefix(key))}: ${typeFromSchema(value)},`;
+    }),
+    "}",
+    "",
+    "export const scopedConfigs = {",
+    `  scope: ${JSON.stringify(packageJson.name)},`,
+    `  defaults: {`,
+    ...scopedConfigs.map(([key, value]) => {
+      return `    ${JSON.stringify(withoutExtensionPrefix(key))}: ${JSON.stringify(value.default)},`;
+    }),
+    `  } satisfies ScopedConfigKeyTypeMap,`,
+    `}`,
+    ""
+  );
   if (namespace) {
     if (namespace === true)
       namespace = "ExtensionMeta";
     lines = lines.map((line) => line ? `  ${line}` : line);
     lines.unshift(
-      ...generateCommentBlock(`Extension Meta for \`${extensionId}\``, 0),
+      ...commentBlock(`Extension Meta for \`${extensionId}\``, 0),
       `export namespace ${namespace} {`
     );
     lines.push(
@@ -149,7 +173,7 @@ function generate(packageJson, options = {}) {
   lines.push("");
   return lines.join("\n");
 }
-function generateCommentBlock(text, padding = 0) {
+function commentBlock(text, padding = 0) {
   const indent = " ".repeat(padding);
   if (!text) {
     return [];
diff --git a/package.json b/package.json
index 812d22dfdef36128d9fb1a4a6ebc7999930c38e2..89b7ad6bcb45781fd45e88ff6de9a01aa5bee6d0 100644
--- a/package.json
+++ b/package.json
@@ -53,9 +53,24 @@
     "devDependencies": {}
   },
   "dependencies": {
-    "cac": "^6.7.14",
-    "scule": "^1.3.0",
-    "yargs": "^17.7.2"
+    "@antfu/eslint-config": "^2.22.0",
+    "@antfu/ni": "^0.21.12",
+    "@antfu/utils": "^0.7.10",
+    "@types/node": "^20.14.10",
+    "@types/yargs": "^17.0.32",
+    "bumpp": "^9.4.1",
+    "eslint": "^9.6.0",
+    "esno": "^4.7.0",
+    "fast-glob": "^3.3.2",
+    "lint-staged": "^15.2.7",
+    "pnpm": "^9.5.0",
+    "rimraf": "^6.0.0",
+    "simple-git-hooks": "^2.11.1",
+    "taze": "^0.14.2",
+    "typescript": "^5.5.3",
+    "unbuild": "^2.0.0",
+    "vite": "^5.3.3",
+    "vitest": "^2.0.1"
   },
   "devDependencies": {
     "@antfu/eslint-config": "^2.22.0",
